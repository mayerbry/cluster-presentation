<link rel="stylesheet" href="http://yandex.st/highlightjs/7.3/styles/default.min.css">
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
<script src="http://yandex.st/highlightjs/7.3/highlight.min.js"></script>
<script>
$(document).ready(function() {
  $('pre code').each(function(i, e) {hljs.highlightBlock(e)});
});
</script>
<style>
pre code.bash {
  background: black;
  color: white;
  font-size: 1em;
}
</style>

Examples of parallel computing and using the cluster
========================================================
width: 1440
height: 900
transition: none
font-family: 'Helvetica'
css: my_style.css
title: "Examples of parallel computing and using the cluster"
author: Bryan Mayer
date: 2/4/2016



Topics
========================================================
1. Example background: a simulation study in CMV
2. Local machine parallel computing
3. Working on the remote machine
4. Sending jobs to the cluster


Simulating infection
========================================================
Need a nice figure here


Model code
========================================================
```{r, warning = F, message = F}
library(knitr)
library(dplyr) #<- we will talk about this
library(ggplot2) 
theme_set(theme_classic())

source("Code/model_functions.R") #model functions in here
```

Example of a simulation:
========================================================
```{r, warning = F, message = F, fig.width = 12, fig.height = 4, fig.align='center'}
start_time = Sys.time()
example = stochastic_model_latent(max_time = 100, initI = 10, infectivity = 1.5, parms)
print(Sys.time() - start_time)

ggplot(data = example, aes(x = time, y = viral_load)) + geom_line()

```

Multiple simulations
========================================================
```{r, warning = F, message = F, fig.width = 12, fig.height = 4, fig.align='center', cache = T}
total_simulations = 10

start_time = Sys.time()
example_simulations = NULL
for(run in 1:total_simulations){
  results = stochastic_model_latent(max_time = 100, initI = 10, infectivity = 1.1, parms)
  results$run = run #keep track of the run
  example_simulations = rbind(example_simulations, results)
}
print(Sys.time() - start_time)

ggplot(data = example_simulations, 
       aes(x = time, y = viral_load, colour = factor(run))) + 
  geom_line()

```
Note: Looping and stacking is a bad way to do things in R.    

Multiple simulations
========================================================
```{r, warning = F, message = F, echo = T, cache = T}
total_simulations = 100

start_time = Sys.time()
example_simulations = NULL
for(run in 1:total_simulations){
  results = stochastic_model_latent(max_time = 100, initI = 10, infectivity = 1.1, parms)
  results$run = run #keep track of the run
  example_simulations = rbind(example_simulations, results)
}
print(Sys.time() - start_time)

rm(example_simulations)
```
If this scaled linearly, we would've expected about 5 seconds but this approach gets worse and worse as the data.frame increases in size, 20x longer per 10x increase - A run of 1000 took 5 minutes, 600x longer for a 100x increase.

Multiple simulations
========================================================
My actual simulations:
```{r, warning = F, message = F, echo = T}
total_simulations = 1000
I0s = c(1:10, 15, 10 * 2:9, 1:4 * 10^2)
infectivity_set = c(1.01, 1.05, 1.1, seq(1.15, 1.3, 0.05), 
                    seq(1.35, 1.65, 0.05), seq(1.7, 2.15, 0.05))

est_time = 5 * length(I0s) * length(infectivity_set)/24
print(paste(est_time, "days"))

```

Local machine solutions
========================================================
1. The `doParallel` package
2. The `plyr` package (uses doParallel)

the doParallel package
========================================================

https://cran.r-project.org/web/packages/doParallel/vignettes/gettingstartedParallel.pdf
```{r, warning = F}
library(doParallel)
```
How many cores do I have?
```{r, warning = F}
detectCores()
```
How many is R using (1 is default)?
```{r, warning = F}
getDoParWorkers()
```
Register your cores and check:
```{r, warning = F}
registerDoParallel(2)
getDoParWorkers()
```

Using foreach
========================================================
```{r, warning = F, message = F, echo = T, cache = T}
total_simulations = 1000

start_time = Sys.time()
example_simulations =  foreach(run = 1:total_simulations, .combine=rbind) %dopar% {
  results = stochastic_model_latent(max_time = 100, initI = 10, infectivity = 1.1, parms,
                                    seed_set = 5)
  results$run = run #keep track of the run
  results
}
print(Sys.time() - start_time)

rm(example_simulations)
```
Versus 5 minutes, so pretty good improvement: partially from more efficient stacking using `.combine` in `foreach`


The plyr package
========================================================

The `plyr` package contains a set of functions that stacks R objects more efficiently. The functions follow the `apply` method of programming that is a classic convention for R programmers.
```{r}
?apply
```
- We will focus on `ldply`, a function that carries out a loop and lets us stack data frames
- In the following example, `ldply` takes two arguments: 1) a set of values to loop through (1:5) and a function that takes the values as a parameter (`i` here). The function just returns the input and `ldply` will stack those and return a data.frame .
```{r}
plyr::ldply(1:5, function(i) i)
```

Biostat example
========================================================

Fake data set has randomly assigned measurements of IgG and IgA. Treatment measurements are an average 2 units higher.
```{r, warning = F}
ptid = LETTERS[1:20]
immuno = c("IgG", "IgA")
trt = c("control", "treatment")
test_data = expand.grid(ptid = ptid, immuno = immuno, trt = trt)
test_data$outcome = with(test_data, ifelse(trt == "control", rnorm(40, 2), rnorm(40, 4)))
head(test_data)
```

Biostat example
========================================================

Run a t-test for both immunoglobulins and save all the results together.
```{r, warning = F, fig.align='center'}
ttest_results = plyr::ldply(immuno, function(imm){
  temp = with(subset(test_data, immuno == imm), t.test(outcome ~ trt))
  data.frame(
    immuno = imm,
    mean_diff = diff(temp$estimate),
    lower_ci = -temp$conf.int[2],
    upper_ci = -temp$conf.int[1]
  )
})
ttest_results
```

Biostat example
========================================================
```{r, warning = F, fig.align='center'}

ggplot(data = ttest_results, 
       aes(x = immuno, y = mean_diff, ymin = lower_ci, ymax = upper_ci)) +
  geom_point() +
  geom_errorbar(width = 0.2)

```


Back to simulation example - using plyr
========================================================
```{r, warning = F, message = F, echo = T, cache = T}
total_simulations = 1000

start_time = Sys.time()
example_simulations = plyr::ldply(1:total_simulations, function(run){ #ldply is a loop
  results = stochastic_model_latent(max_time = 100, initI = 10, infectivity = 1.1, parms,
                                    seed_set = 5)
  results$run = run #keep track of the run
  results
})
print(Sys.time() - start_time)

rm(example_simulations)
```
This did even better than foreach without any parallel processing!

Adding parallel computing in plyr is simple.
========================================================
```{r, warning = F, message = F, echo = T, cache = T}
total_simulations = 1000

start_time = Sys.time()
example_simulations = plyr::ldply(1:total_simulations, function(run){ #ldply is like a loop
  results = stochastic_model_latent(max_time = 100, initI = 10, infectivity = 1.1, parms,
                                    seed_set = 5)
  results$run = run #keep track of the run
  results
}, .parallel = T) #Just set this .parallel = T after you close the function

print(Sys.time() - start_time)

rm(example_simulations)
```
About 2x improvement.

Connecting to rhino
========================================================
```{r, eval = F, engine = "bash", out.width="1920px",height="1080px"} 
Bryans-iMac-2:~ bmayer$ ssh bmayer@rhino.fhcrc.org
``` 
and then enter your password when prompted

Connecting to rhino
========================================================
Then this might happen

![alt text](images/connect.png)

